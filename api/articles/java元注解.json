{"title":"java元注解","slug":"java元注解","date":"2019-07-27T14:07:27.000Z","updated":"2019-07-27T14:15:07.013Z","comments":true,"excerpt":"","content":"<h1 id=\"Java-元注解\"><a href=\"#Java-元注解\" class=\"headerlink\" title=\"Java 元注解\"></a>Java 元注解</h1><p>注解（Annontion）是Java5开始引入的新特征。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。</p>\n<p>1、元注解<br>      元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解有以下几种：</p>\n<p>@Target<br>@Retention<br>@Documented<br>@Inherited</p>\n<p>1.1 @Target</p>\n<p>　　用于描述注解的范围，即注解在哪用。它说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）等。取值类型（ElementType）有以下几种：</p>\n<p>　　CONSTRUCTOR:用于描述构造器<br>　　FIELD:用于描述域即类成员变量<br>　　LOCAL_VARIABLE:用于描述局部变量<br>　　METHOD:用于描述方法<br>　　PACKAGE:用于描述包<br>　　PARAMETER:用于描述参数<br>　　TYPE:用于描述类、接口(包括注解类型) 或enum声明<br>　　TYPE_PARAMETER:1.8版本开始，描述类、接口或enum参数的声明<br>　　TYPE_USE:1.8版本开始，描述一种类、接口或enum的使用声明<br>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">上述表示Log注解可以用在类、接口、<span class=\"keyword\">enum</span>和方法上</span><br></pre></td></tr></table></figure>\n\n<p>1.2 @Retention</p>\n<p>　　用于描述注解的生命周期，表示需要在什么级别保存该注解，即保留的时间长短。取值类型（RetentionPolicy）有以下几种：</p>\n<p>　　SOURCE:在源文件中有效（即源文件保留）<br>　　CLASS:在class文件中有效（即class保留）<br>　　RUNTIME:在运行时有效（即运行时保留）<br>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\">　　......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述示例使用RetentionPolicy.RUNTIME，这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理。</p>\n<p>1.3 @Documented</p>\n<p>　　用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。它是一个标记注解，没有成员。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\">　　......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.4 @Inherited</p>\n<p>　　用于表示某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>\n","categories":[],"tags":[]}